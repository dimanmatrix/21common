https://widum.ru/s21/sql/

https://claude.ai/chat/f94d2554-ae22-400d-bc74-cd1bbec39c17

Какое из следующих понятий описывает связь между двумя сущностями в логической модели данных?
A) Хеш-код
+ B) Внешний ключ
C) Триггер
D) Индекс



11. Какое действие выполняет команда COMMIT?

A) отменяет все изменения
B) применяет изменения текущей транзакции только для чтения
+ C) подтверждает все изменения, сделанные в текущей транзакции
D) отменяет текущую транзакцию
COMMIT сохраняет все изменения, сделанные с начала транзакции.



13. Какая из перечисленных служб управляет доступом к данным?

A) Query Optimizer
B) Transaction Manager
C) SQL server
+ D) DBMS

DBMS (СУБД, Database Management System) — это система управления базами данных, которая отвечает за все аспекты работы с данными, включая управление доступом.




============================================================
============================================================
============================================================

18. Что такое первичный ключ?

A) Столбец с дублирующимися значениями
+ B) Уникальный идентификатор записей в таблице
C) Столбец содержащий внешний ключ
D) Столбец с уникальным значением и NULL
Первичный ключ — уникальный идентификатор строки, не может быть NULL.


8. Какое из следующих понятий описывает связь между двумя сущностями в логической модели данных?

A) Хеш-код
+ B) Внешний ключ
C) Триггер
D) Индекс
Внешний ключ связывает строки между таблицами, устанавливая логические связи.



25. Что произойдет, если объект с CHECK CONSTRAINT не пройдет проверку при вставке?

A) Данные будут автоматически удалены
B) Ограничение будет автоматически отключено
C) БД выдаст предупреждение, но продолжит операцию
+ D) Операция вставки или обновления будет отклонена
CHECK CONSTRAINT запрещает вставку данных, нарушающих условие.


26. Какая команда используется для создания CHECK CONSTRAINT?

A) UPDATE TABLE
B) CREATE TABLE
C) INSERT INTO
+ D) ALTER TABLE


29. Какая команда используется для создания составного индекса?

A) CREATE COMPOSITE INDEX
B) CREATE INDEX table_name (col, index, col2)
C) ADD COMPOSITE INDEX
+ D) CREATE INDEX comp_index on table_name (col1, col2)
Правильный синтаксис: CREATE INDEX имя ON таблица (поле1, поле2).


1. Какая команда используется для создания FOREIGN KEY?

A) INSERT INTO
B) ALTER VIEW
C) CREATE INDEX
+ D) ADD CONSTRAINT
FOREIGN KEY добавляется через ADD CONSTRAINT.

============================================================
============================================================
============================================================



21. Что концептуально представляет собой структура ER-модели?

A) Имена сущностей
B) Характеристики сущностей
+ C) Отношения между сущностями
D) Ключевые слова

ER-модель (Entity-Relationship Model) концептуально представляет собой
 способ описания отношений между сущностями в предметной области.


???? (вопроса не было) Что такое атрибуты в ER-модели?
+ характеристики сущности
ключевые слова
отношения между сущностями

17. Какая из перечисленных не относится к реляционным БД?

A) psql
B) oracle
+ C) mongodb
D) mysql
MongoDB — это документо-ориентированная NoSQL база данных, которая НЕ является реляционной.


30. Что подходит по термин реляционная БД?

A) хранилище JSON-файлов
B) большие файлы
C) на графах
+ D) структура, данных основанная на связях между таблицами
Реляционная модель — это таблицы, связанные друг с другом через ключи.

4. Какой из следующих языков используется для описания логической модели данных?

A) JSON
B) SQL
C) HTML
+ D) UML
UML — язык для визуального описания логической модели данных, сущностей и связей между ними.


2. Что означает CAP в CAP-теореме?

A) Connection, Authentication, Persistence
B) Consistency, Accuracy, Performance
C) Coordination, Availability, Processing
+ D) Consistency, Availability, Partition Tolerance
CAP-теорема описывает невозможность одновременного соблюдения всех трёх свойств в распределённой системе.



Какой принцип ACID гарантирует, что если транзакция прошла успешно, изменения будут сохранены даже в случае сбоя?

+ A) Надежность
B) Атомарность
C) Согласованность
D) Изоляция
Надежность (Durability) обеспечивает сохранение данных даже при сбое.


28. Что представляет собой первая нормальная форма (1NF)?

A) Все значения атрибутов в таблице уникальны
B) Каждая таблица имеет первичный ключ
C) Все атрибуты зависят от первичного ключа
+ D) Каждая ячейка в таблице содержит только 1 значение
1NF требует атомарности: каждое поле содержит только одно значение.
Первая нормальная форма (1NF) требует, чтобы каждая ячейка таблицы содержала 
атомарное (неделимое) значение — то есть только одно значение.

"Все атрибуты зависят от первичного ключа" - 
Это требование второй нормальной формы (2NF)
В 1NF речь не идет о функциональных зависимостях




============================================================
============================================================
============================================================

Практика 1

SELECT CASE WHEN NULL = 5 THEN ‘A’ WHEN NULL <> 5 THEN ‘B’ ELSE ‘C’ END AS result;
A) ‘A’
B) NULL
C) ‘C’
D) ‘B’
NULL не равен и не неравен 5, условие не срабатывает, ELSE → ‘C’.


27. Практика 2

SELECT sum(tl.value) FROM (SELECT NULL::INTEGER as value) AS tl;
+ A) NULL
B) 0
C) 1
D) синт. ошибка
SUM от NULL без фильтра возвращает NULL.
NULL::INTEGER
Это приведение типа (type casting), которое:

Берет значение NULL
Указывает, что это NULL типа INTEGER
НЕ изменяет само значение NULL

SUM(NULL) → NULL (по правилам SQL)



Практика 3

SELECT 1 + 1 AS value WHERE 1 = 1 AND 2 = 1;
A) 2
B) NULL
+ C) не вернет ни одной строки
D) синт. ошибка
WHERE 1=1 AND 2=1 → FALSE, значит ни одна строка не вернется.


Практика 4

Student
id	name
1	Ivan
2	Anna
3	Irina

Hobby
id	student_id	hobby
10	1	Hockey
20	1	Music
30	3	Reading
40	4	Swimming
 

SELECT count(*) FROM Student AS s WHERE EXISTS (SELECT NULL FROM Hobby AS h WHERE h.student_id = s.id LIMIT 1);
A) NULL
+ B) 2
C) не вернет ни одной строки
D) 3
Только два студента имеют записи в Hobby.
SELECT NULL в EXISTS не важно — EXISTS проверяет только наличие строк
LIMIT 1 избыточен в EXISTS — EXISTS останавливается на первом совпадении


Практика 5

Student

id	name
1	Ivan
2	Anna
3	Irina
Hobby

id	student_id	hobby
10	1	Hockey
20	1	Music
30	3	Reading
40	4	Swimming
 

SELECT count(*) FROM Student AS s WHERE id IN (SELECT * FROM Hobby);
+ A) синт. ошибка
B) NULL
C) 2
D) 3
SELECT * нельзя использовать в подзапросе в IN — синтаксическая ошибка.


23. Практика 6

Student
id	name	reg_num
1	Ivan	123
2	Anna	NULL
3	Irina	456

SELECT reg_num FROM Student ORDER BY reg_num NULLS LAST LIMIT 1;
+ A) 123
B) NULL
C) 456
D) не вернет ни одной строки
NULLS LAST означает, что NULL в конце.
ORDER BY reg_num — по возрастанию: 123, 456, NULL.
LIMIT 1 — берём первый элемент → 123.


7. Практика 7

Hobby

id	student	hobby
1	Иван	Хоккей
2	Анна	Блог
3	Ирина	Чтение
4	Иван	Футбол
5	Анна	Спорт
 

SELECT student FROM Hobby GROUP BY student HAVING student LIKE ‘%Анна%’ LIMIT 1;
A) синт. ошибка
+ B) ‘Анна‘
C) NULL
D) не вернет ни одной строки
HAVING используется после GROUP BY. Если значение удовлетворяет LIKE — оно будет выбрано.


Практика 8

Employee

id	employee	transaction
1	Иван	100
2	Анна	200
3	Ирина	50
4	Иван	330
5	Анна	45
 

SELECT employee, sum(transaction) FROM Employee GROUP BY employee ORDER BY 2 DESC LIMIT 1;
A) синт. ошибка
B) ('Ирина', 50)
C) ('Анна', 530)
+ D) ('Иван', 430)
Иван: 100+330 = 430. У Анны: 200+45 = 245. Значит, Иван на первом месте.


6. Практика 9

Employee

id	employee	transaction
1	Иван	100
2	Анна	200
3	Ирина	50
4	Иван	330
5	Анна	45
 

SELECT DISTINCT employee as emp FROM Employee ORDER BY 1 DESC LIMIT 1;
A) синт. ошибка
+ B) ‘Ирина’
C) ‘Анна’
D) ‘Иван’
Имена сортируются по алфавиту, DESC — значит последняя по алфавиту: ‘Ирина’.


5. Практика 10

Employee

id	employee	transaction
1	Иван	100
2	Анна	200
3	Ирина	50
4	Иван	330
5	Анна	45
 

SELECT employee FROM (SELECT employee, row_number() OVER (ORDER BY transaction) as row_num FROM Employee GROUP BY employee) AS tl WHERE tl.row_num = 2 ORDER BY 1 ASC LIMIT 1;
A) ‘Анна’
B) ‘Иван’
C) ‘Ирина’
+ D) синт. ошибка
Ошибка: нельзя использовать window-функции (row_number) вместе с GROUP BY без агрегатных функций.



20. Практика 11

Student
id	name
1	Иван
2	Анна
3	Ирина

Hobby
id	student_id	hobby
10	1	Хоккей
20	1	Музыка
30	3	Чтение
40	4	Плавание

SELECT s.name, h.hobby FROM Student AS s INNER JOIN Hobby AS h ON s.id = h.student_id WHERE h.hobby = ‘Хоккей’ AND h.hobby = ‘Чтение’;
A) ('Иван', 'Хоккей')
B) (NULL, NULL)
C) ('Ирина', 'Чтение')
+ D) не вернет ни одной строки
Одновременно hobby не может быть и 'Хоккей', и 'Чтение'. Условие невозможно выполнить.



Практика 12
Student

id	name
1	Иван
2	Анна
3	Ирина

Hobby
id	student_id	hobby
10	1	Хоккей
20	1	Музыка
30	3	Чтение
40	4	Плавание

SELECT * FROM Student AS s CROSS JOIN Hobby AS h;
A) R = 4, C = 5
+ B) R = 12, C = 5
C) R = 4, C = 4
D) R = 12, C = 4
CROSS JOIN перемножает 3 студента × 4 хобби = 12 строк.
Выбираются все столбцы из обеих таблиц:
id, name (из Student) + id, student_id, hobby (из Hobby) → всего 5 столбцов.


9. Практика 13

Student

id	name
1	Иван
2	Анна
3	Ирина
Hobby

id	student_id	hobby
10	1	Хоккей
20	1	Музыка
30	3	Чтение
40	4	Плавание
 

SELECT s.name, h.hobby FROM Student AS s RIGHT JOIN Hobby AS h ON s.id = h.student_id ORDER BY s.name NULLS FIRST;
A) не вернет ни одной строки
B) ('Иван', 'Музыка')
+ C) (NULL, 'Плавание')
D) ('Анна', NULL)
ID 4 нет в Student, но есть в Hobby — RIGHT JOIN даст строку с NULL в имени.


Практика 14

Student

id	name
1	Иван
2	Анна
3	Ирина
Hobby

id	student_id	hobby
10	1	Хоккей
20	1	Музыка
30	3	Чтение
40	4	Плавание
 

SELECT string_agg(tl.id::VARCHAR, ‘,’ ORDER BY tl.id) AS result FROM (SELECT s.id FROM Student AS s UNION SELECT h.student_id FROM Hobby as h) as tl;
+ A) 1, 2, 3, 4
B) 1, 1, 2, 3, 3, 4
C) синт. ошибка
D) 1, 1, 1, 2, 3, 3, 4

UNION убирает дубликаты, поэтому получим уникальные id: 1, 2, 3, 4.


3. Практика 15

Student

id	name
1	Иван
2	Анна
3	Ирина
Hobby

id	student_id	hobby
10	1	Хоккей
20	1	Музыка
30	3	Чтение
40	4	Плавание
 

WITH _a AS (SELECT s.name, h.hobby FROM Student AS s RIGHT JOIN Hobby AS h ON s.id = h.student_id ORDER BY s.name NULLS FIRST LIMIT 1), _b AS (SELECT 1/0 AS res) SELECT * FROM _a;
A) ('Иван', 'Музыка')
B) ('Анна', NULL)
+ C) (NULL, 'Плавание')
D) не вернет ни одной строки
CTE _b с делением на 0 не используется, поэтому SELECT из _a сработает.
